// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserKey {
  id              String   @id @default(cuid())
  userId          String   @unique
  encryptedKey    String   // User's encryption key encrypted with MASTER_KEY
  iv              String   // IV used for encrypting the user key
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation to passwords
  passwords       Password[]
  // Relation to clients
  clients         Client[]
  // Relation to services
  services        Service[]

  @@map("user_keys")
}

model Client {
  id         String   @id @default(cuid())
  name       String
  website    String?  // Optional website URL
  color      String   @default("#7DF9FF") // Pellet color (hex)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to user key
  userKey    UserKey  @relation(fields: [userId], references: [userId])
  // Relation to passwords
  passwords  Password[]

  @@map("clients")
}

model Service {
  id         String   @id @default(cuid())
  name       String
  color      String   @default("#4ECDC4") // Service color (hex)
  isCustom   Boolean  @default(false) // True for user-created services
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to user key
  userKey    UserKey  @relation(fields: [userId], references: [userId])
  // Relation to passwords
  passwords  Password[]

  @@map("services")
}

model Password {
  id         String   @id @default(cuid())
  name       String
  username   String?  // Plain text username (not encrypted)
  url        String?  // Connection URL for the service
  ciphertext String   // Password encrypted with user's key
  iv         String   // IV used for password encryption
  userId     String
  clientId   String?  // Optional client association
  serviceId  String?  // Optional service association
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to user key
  userKey    UserKey  @relation(fields: [userId], references: [userId])
  // Relation to client
  client     Client?  @relation(fields: [clientId], references: [id])
  // Relation to service
  service    Service? @relation(fields: [serviceId], references: [id])

  @@map("passwords")
}
